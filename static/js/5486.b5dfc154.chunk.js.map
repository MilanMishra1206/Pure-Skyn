{"version":3,"file":"static/js/5486.b5dfc154.chunk.js","mappings":"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","sources":["shared/CustomTextField/index.jsx"],"sourcesContent":["/* eslint-disable no-undef */\nimport \"tailwindcss/tailwind.css\";\nimport { memo } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport classNames from \"classnames\";\nimport { IconButton, InputAdornment } from \"@mui/material\";\n\nfunction CustomTextField({\n  className,\n  inputClassName,\n  onChange,\n  value,\n  name,\n  touched,\n  error,\n  handleBlur,\n  requiredStar,\n  disabledField,\n  maxLength,\n  autoComplete,\n  placeholder,\n  labelToShow,\n  textClassOverride,\n  placeholderClasses,\n  textFieldColorClass,\n  fieldWidth,\n  icon,\n  iconEnd,\n  type,\n  multiline,\n  rows,\n  regex,\n  textTransform,\n  iconOnClick,\n}) {\n  return (\n    <div className={`flex flex-col ${fieldWidth}`}>\n      {labelToShow && (\n        <div className=\"flex flex-row justify-between\">\n          <p\n            className={classNames(\n              \"text-sm font-medium pb-1\",\n              textClassOverride\n            )}\n          >\n            {labelToShow}\n            {requiredStar && <span className=\"text-bitterSweet\">*</span>}\n          </p>\n        </div>\n      )}\n      <div className={`${className}`}>\n        <div\n          className={`rounded-lg h-12 border ${textFieldColorClass} ${\n            disabledField && \"!bg-solitude-1\"\n          } !flex !items-center\n           ${error && touched && \"!border !border-bitterSweet\"}`}\n        >\n          <TextField\n            fullWidth\n            rows={rows}\n            multiline={multiline}\n            disabled={disabledField}\n            required={requiredStar}\n            variant=\"filled\"\n            placeholder={placeholder}\n            onBlur={handleBlur}\n            type={type}\n            InputProps={{\n              startAdornment: icon && (\n                <InputAdornment position=\"start\" className=\"!mt-0\">\n                  <IconButton\n                    className=\"!text-lg !px-0 !py-0\"\n                    onClick={iconOnClick}\n                  >\n                    {icon}\n                  </IconButton>\n                </InputAdornment>\n              ),\n              endAdornment: iconEnd && (\n                <InputAdornment position=\"end\" className=\"!mt-0\">\n                  <IconButton\n                    className=\"!text-lg !px-0 !py-0\"\n                    onClick={iconOnClick}\n                  >\n                    {iconEnd}\n                  </IconButton>\n                </InputAdornment>\n              ),\n              classes: {\n                input: `!text-sm !h-full !font-poppins !py-0 !pl-0   ${placeholderClasses}`,\n                root: `!rounded-lg !pl-3 !w-[96.5%] ${inputClassName} `,\n                disabled: `!bg-transparent ${disabledField && \"!bg-solitude-1\"}`,\n              },\n              disableUnderline: true,\n            }}\n            InputLabelProps={{\n              classes: {\n                root: \"!text-sm !text-licorice\",\n                shrink: \"!text-licorice !text-xs\",\n              },\n            }}\n            sx={{\n              \"& .MuiInputBase-input.Mui-disabled\": {\n                opacity: 10,\n                WebkitTextFillColor: \"rgba(0, 0, 0, 0.93)\",\n              },\n            }}\n            inputProps={{\n              maxLength,\n              autoComplete,\n            }}\n            onChange={(event) => {\n              if (\n                textTransform &&\n                textTransform?.toLowerCase() === \"uppercase\"\n              ) {\n                event.target.value = event.target.value\n                  .toString()\n                  .toUpperCase();\n              }\n              if (/[<>]/.test(event.target.value)) {\n                return;\n              }\n              if (regex && !regex.test(event.target.value)) {\n                return;\n              } else if (maxLength && event.target.value.length > maxLength) {\n                return;\n              }\n              if (type === \"number\") {\n                if (\n                  Number(event.target.value) ||\n                  Number(event.target.value) === 0\n                ) {\n                  const newValue = parseFloat(event.target.value) || 0;\n                  event.target.value = Math.max(newValue, 0);\n                  if (\n                    event.target.value.length === 1 &&\n                    event.target.value === \"0\"\n                  ) {\n                    event.target.value = \"\";\n                  }\n                  onChange(event);\n                } else {\n                  event.target.value = \"\";\n                  onChange(event);\n                }\n              } else {\n                onChange(event);\n              }\n            }}\n            value={value}\n            name={name}\n          />\n        </div>\n      </div>\n      {touched && error && (\n        <p className=\"mt-1 ml-1 text-xs text-bitterSweet\">{error}</p>\n      )}\n    </div>\n  );\n}\n\nexport default memo(CustomTextField);\n"],"names":["CustomTextField","_ref","className","inputClassName","onChange","value","name","touched","error","handleBlur","requiredStar","disabledField","maxLength","autoComplete","placeholder","labelToShow","textClassOverride","placeholderClasses","textFieldColorClass","fieldWidth","icon","iconEnd","type","multiline","rows","regex","textTransform","iconOnClick","_jsxs","concat","children","_jsx","classNames","TextField","fullWidth","disabled","required","variant","onBlur","InputProps","startAdornment","InputAdornment","position","IconButton","onClick","endAdornment","classes","input","root","disableUnderline","InputLabelProps","shrink","sx","opacity","WebkitTextFillColor","inputProps","event","toLowerCase","target","toString","toUpperCase","test","length","Number","newValue","parseFloat","Math","max","memo"],"sourceRoot":""}